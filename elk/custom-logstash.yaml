logstashJavaOpts: "-Xmx256m -Xms256m"

resources:
  requests:
    cpu: "100m"
    memory: "1Gi"
  limits:
    cpu: "1000m"
    memory: "1Gi"

volumeClaimTemplate:
  accessModes: ["ReadWriteOnce"]
  storageClassName: longhorn-storage-delete
  resources:
    requests:
      storage: 512Mi

antiAffinity: "soft"

extraEnvs: 
  - name: xpack.monitoring.enabled
    value: "false"

service:
  type: ClusterIP
  ports:
    - name: beats
      port: 5044
      protocol: TCP
      targetPort: 5044
    - name: http
      port: 9600
      protocol: TCP
      targetPort: 9600

logstashPipeline:
  logstash.conf: |
    input {
      beats {
        port => "5044"
      }
    }

    filter {
      mutate {
        add_field => { "received_at" => "%{@timestamp}" }
      }

      if [service] == "frontend" {
        grok {
          match => {
            "message" => "%{YEAR:message_year}/%{MONTHNUM:message_month}/%{MONTHDAY:message_day} %{TIME:message_time} \\[%{WORD:message_loglevel}\\] %{NUMBER:message_pid}#%{NUMBER:message_worker}: %{GREEDYDATA:message_content}"
          }
        }
      } else if [service] == "backend" or [service] == "notification-service" {
        grok {
          match => {
            "message" => "%{TIMESTAMP_ISO8601:message_timestamp}\\s+%{LOGLEVEL:message_loglevel} %{NUMBER:message_pid} --- \\[%{DATA:message_service}\\] \\[\\s+%{DATA:message_thread}\\] %{DATA:message_class}\\s+:\\s+%{GREEDYDATA:message_content}"
          }
        }
      } else if [service] == "rabbitmq" {
        grok {
          match => {
            "message" => "%{TIMESTAMP_ISO8601:message_timestamp} \\[%{WORD:message_loglevel}\\] <%{DATA:message_pid}> %{GREEDYDATA:message_content}"
          }
        }
      } else if [service] == "mysql" {
        grok {
          match => {
            "message" => "%{TIMESTAMP_ISO8601:message_timestamp} %{NUMBER:message_pid} \\[%{WORD:message_loglevel}\\] \\[%{DATA:message_code}\\] \\[%{WORD:message_component}\\] %{GREEDYDATA:message_content}"
          }
        }
      }

      if [message_loglevel] and [message_loglevel] =~ /(?i)error/ {
        aggregate {
          task_id => "%{service}"
          code => "map['error_count'] ||= 0; map['error_count'] += 1"
          timeout => 60
          push_map_as_event_on_timeout => true
          timeout_task_id_field => "error_service"
        }
      }
    }

    output {
      if "myopensource" in [tags] {
        elasticsearch {
          hosts => ["elasticsearch-master:9200"]
          index => "myopensource_%{service}_%{+YYYY.MM.dd}"
        }
      } else if "myservice" in [tags] {
        elasticsearch {
          hosts => ["elasticsearch-master:9200"]
          index => "myservice_%{service}_%{+YYYY.MM.dd}"
        }
      } else {
        elasticsearch {
          hosts => ["elasticsearch-master:9200"]
          index => "default_%{+YYYY.MM.dd}"
        }
      }
    }

    output{
      if [error_service] and [error_count] > 10 {
        email {
          to => "22520527@gm.uit.edu.vn"
          from => "tienhung17092004@gmail.com"
          subject => "Logstash Alert: More than 10 ERROR logs in a minute from service %{error_service}"
          body => "There have been %{error_count} logs in the past minute from service %{error_service}."
          address => "smtp.gmail.com"
          port => 587
          username => "tienhung17092004@gmail.com"
          password => "xxxxxxx"
          authentication => "plain"
          use_tls => true
        }
      }
    }